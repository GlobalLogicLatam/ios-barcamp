// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSTextContainer;
@class NSCoder;

/**
  A subclass of UITextView that enable add placer holder
*/
SWIFT_CLASS("_TtC9GLCommons21GLPlaceholderTextView")
@interface GLPlaceholderTextView : UITextView
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer SWIFT_UNAVAILABLE;
/**
  Constructs a new GLPlaceholderTextView object
  \param aDecoder aDecoder

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end

@class UIScrollView;
@class UIView;

/**
  Helper class to manage keyboard avoiding actions
*/
SWIFT_CLASS("_TtC9GLCommons15KeyboardManager")
@interface KeyboardManager : NSObject
/**
  Inputs content view
*/
@property (nonatomic, weak) UIScrollView * _Null_unspecified contentView;
/**
  Creates an instance of \code
  KeyboardManager
  \endcode with given content view
  \param contentView The fields content view

*/
- (nonnull instancetype)initWithContentView:(UIScrollView * _Nonnull)contentView OBJC_DESIGNATED_INITIALIZER;
/**
  Current active  field
*/
@property (nonatomic, strong) UIView * _Nullable activeField;
/**
  The space between the keybaord and the input field. By default is 30 pt
*/
@property (nonatomic) CGFloat keyboardPaddingTop;
/**
  set back the to initial UIScrollView contentOffset
*/
@property (nonatomic) BOOL keepStartOffet;
/**
  Observe for TextDidBeginEditing changes in the provided view
  \param input The view to observe

*/
- (void)observe:(UIView * _Nonnull)input;
/**
  Remove observer from an input view
  \param input The view to remove observers

*/
- (void)removeObserver:(UIView * _Nonnull)input;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIColor;
@class UIBarButtonItem;

/**
  Helper class to navigate easily between input controls
*/
SWIFT_CLASS("_TtC9GLCommons15KeyboardToolbar")
@interface KeyboardToolbar : UIToolbar
/**
  ScrollView container
*/
@property (nonatomic, weak) UIScrollView * _Nullable mainScrollView;
/**
  Toolbar tint color
*/
@property (nonatomic, strong) UIColor * _Nonnull navigationButtonsTintColor;
/**
  Toolbar previous button
*/
@property (nonatomic, readonly, strong) UIBarButtonItem * _Nonnull barButtonItemPrevious;
/**
  Toolbar next button
*/
@property (nonatomic, readonly, strong) UIBarButtonItem * _Nonnull barButtonItemNext;
/**
  Toolbar done button
*/
@property (nonatomic, readonly, strong) UIBarButtonItem * _Nonnull barButtonItemDone;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/**
  Constructs a Toolbar object
  \param aDecoder aDecoder

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Returns a KeyboardToolbar object with default initialization

  returns:
  A KeyboardToolbar initilized
*/
+ (KeyboardToolbar * _Nonnull)defaultToolbar;
/**
  Add an item to end of the stack.
  \param field The field object

*/
- (void)addField:(id _Nonnull)field;
/**
  Add field to an specified index on the stack
  \param field The field to add

  \param index The index on the stack

*/
- (void)addField:(id _Nonnull)field index:(NSInteger)index;
/**
  Add field to an specified index on the stack. The method is used for cases where the field
  share same index value.
  \param field The field to add

  \param afterIndex The index on the stack

*/
- (void)addField:(id _Nonnull)field afterIndex:(NSInteger)afterIndex;
/**
  Remove a field from the stack
  \param field The field to remove

*/
- (void)removeField:(id _Nonnull)field;
@end

@class UIViewController;

/**
  The TabBarManager class provides support for hiding and showing a tab bar as the user scrolls.
*/
SWIFT_CLASS("_TtC9GLCommons13TabBarManager")
@interface TabBarManager : NSObject
/**
  Constructs a new TabBarManager
  \param viewController A tab bar controller or a view controller which contains the nearest ancestor in the view controller hierarchy that is a tab bar controller

  \param scrollView The UIScrollView that will drive the hide/show process

  \param animated true if you want to animate the hiding and showing of the tab bar, and false if the action should be immediate.

*/
- (nullable instancetype)initWithViewController:(UIViewController * _Nonnull)viewController scrollView:(UIScrollView * _Nonnull)scrollView animated:(BOOL)animated OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface UIBarButtonItem (SWIFT_EXTENSION(GLCommons))
@end


@interface UIButton (SWIFT_EXTENSION(GLCommons))
/**
  Set a specified background color for the specified state
  \param color A Background color

  \param state A button state

*/
- (void)setBackgroundColor:(UIColor * _Nonnull)color state:(UIControlState)state;
@end


@interface UIColor (SWIFT_EXTENSION(GLCommons))
@end


@interface UIDatePicker (SWIFT_EXTENSION(GLCommons))
@property (nonatomic, readonly) id _Nonnull componentValue;
@end


@interface UIFont (SWIFT_EXTENSION(GLCommons))
@end


@interface UIImage (SWIFT_EXTENSION(GLCommons))
@end


@interface UISegmentedControl (SWIFT_EXTENSION(GLCommons))
@property (nonatomic, readonly) id _Nonnull componentValue;
@end


@interface UISlider (SWIFT_EXTENSION(GLCommons))
@property (nonatomic, readonly) id _Nonnull componentValue;
@end


@interface UIStepper (SWIFT_EXTENSION(GLCommons))
@property (nonatomic, readonly) id _Nonnull componentValue;
@end


@interface UISwitch (SWIFT_EXTENSION(GLCommons))
@property (nonatomic, readonly) id _Nonnull componentValue;
@end


@interface UITextField (SWIFT_EXTENSION(GLCommons))
@property (nonatomic, readonly) id _Nonnull componentValue;
@end


@interface UITextView (SWIFT_EXTENSION(GLCommons))
@property (nonatomic, readonly) id _Nonnull componentValue;
@end


@interface UIView (SWIFT_EXTENSION(GLCommons))
@end


@interface UIViewController (SWIFT_EXTENSION(GLCommons))
/**
  Creates an intance of \code
  UIViewController
  \endcode based in a storyboard file name

  returns:
  An instance of \code
  UIViewController
  \endcode
*/
+ (UIViewController * _Nonnull)create;
@end

#pragma clang diagnostic pop
